apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'checkstyle'
apply from: '../jacoco.gradle'
apply from: '../sonarqube_module.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId "com.demo.testreport"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    buildTypes {
        debug {
            minifyEnabled false
            testCoverageEnabled true
            debuggable true
            versionNameSuffix "-nr"
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def date = new Date();
            def formattedDate = date.format('yyyyMMdd_HHmm')
            def signingConfig = variant.signingReady ? "" : "-unsigned"
            outputFileName = "TestReport-${variant.name}${signingConfig}-${variant.versionName}-" + formattedDate + ".apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'build-data.properties'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/MANIFEST.MF'
    }
}

task checkstyle(type: Checkstyle) {
    configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures false
    showViolations true

    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    def configProps = ['proj.module.dir': projectDir.absolutePath]
    configProperties configProps

    // empty classpath
    classpath = files()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(project(':aar-lib'))
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'


    androidTestUtil 'androidx.test:orchestrator:1.3.0'
    testImplementation 'junit:junit:4.13.2'
    // Mockito framework
    testImplementation 'org.mockito:mockito-core:3.6.28'

    // Core library - Robolectric environment
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test:core-ktx:1.3.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.2'
    //androidTestImplementation 'androidx.test.ext:truth:1.2.0'
    //androidTestImplementation 'com.google.truth:truth:0.42'

    // UI Automator
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    //androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.2.0'
    //androidTestImplementation 'androidx.test.espresso:espresso-web:3.2.0'
    //androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.2.0'

    // The following Espresso dependency can be either "implementation"
    // or "androidTestImplementation", depending on whether you want the
    // dependency to appear on your APK's compile classpath or the test APK
    // classpath.
    //androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.2.0'

    //preBuild.dependsOn('checkstyle')
    //check.dependsOn('checkstyle')
}
